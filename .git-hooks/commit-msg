#!/usr/bin/env node

const { execSync } = require("child_process");
const fs = require("fs");

const commitMsgFile = process.argv[2];
const commitMsg = fs.readFileSync(commitMsgFile, "utf8").trim();

const regex = /^(feat|fix|BREAKING|refactor)/i;

if (!regex.test(commitMsg)) {
  console.error("Commit message does not follow Conventional Commits!");
  process.exit(1);
}

let lastTag;
try {
  lastTag = execSync("git describe --tags --abbrev=0", { encoding: "utf8" }).trim();
} catch (e) {
  lastTag = "0.0.0";
}

let [major, minor, patch] = lastTag.replace(/^v/, "").split(".").map(Number);

let newVersion;
if (/!/.test(commitMsg) || /^feat.*BREAKING CHANGE/.test(commitMsg)) {
  major++;
  minor = 0;
  patch = 0;
} else if (/^feat/.test(commitMsg)) {
  minor++;
  patch = 0;
} else if (/^fix/.test(commitMsg)) {
  patch++;
} else {
  console.log("ℹ️ Commit type does not require version bump.");
  process.exit(0);
}

newVersion = `v${major}.${minor}.${patch}`;

try {
  execSync(`git tag ${newVersion}`, { stdio: "inherit" });
  console.log(`Created new tag: ${newVersion}`);
} catch (err) {
  console.error("❌ Failed to create tag", err.message);
  process.exit(1);
}

process.exit(0);
